@import 'helpers';
@import 'math';
@import 'function';
@import 'checks';



@function bezier($ease, $i) {
	$time: 0;
	$i-1: (1 - $i);

	//	P = (1−t)3P1 + 3(1−t)2tP2 +3(1−t)t2P3 + t3P4

	$p1: ($i-1 * $i-1 * $i-1 * nth($ease, 1));
	$p2: (3 * $i-1 * $i-1 * $i * nth($ease, 2));
	$p3: (3 * $i-1 * $i * $i * nth($ease, 3));
	$p4: ($i * $i * $i * nth($ease, 4));
	$time: $p1 + $p2 + $p3 + $p4;

	@return $time;
}


// @for $i from 0 through 10{
// 	$ease: 0 0 1 1;
// 	@debug bezier(0 0 1 1, $i);
// }

// Ease
//
//
@function to-ease($colors, $ease) {
	$stops: ();

	@for $i from 1 through 10 {
		$stop: ();
		$mix-percentage: 0;
		@if type-of($ease) == 'list' AND length($ease) == 4 {
			@debug bezier($ease, $i);
			$mix-percentage: percentage($i/10);
		} @else {
			$mix-percentage: percentage(decimal-round(ease($ease, $i)) / 10);
		}
		$percentage: percentage($i/10);
		$color: mix(nth($colors, 1), nth($colors, 2), $mix-percentage);
		$stops: append($stops, ($color, $percentage));
	}
	@return $stops;
}

// The function
@function ease-gradient($args...) {
	$gradient-colors: ();
	$gradient-ease: null;
	$gradient-direction: null;

	@each $arg in $args {
		@if is-color($arg) {
			$gradient-colors: append($gradient-colors, $arg);
		}
		@if is-direction($arg) {
			$gradient-direction: $arg;
		}
	}

	@if is-color(nth($args, length($args))) {
		@debug "your gradient ends with a color, thus can't be an easing gradient";
		@return linear-gradient($args);
	} @else if is-curve(nth($args, length($args))) {
		@if $gradient-direction {
			@if length($gradient-colors) > 2 {
				@return linear-gradient(
					$gradient-direction,
					to-string($gradient-colors, ' ')
				);
			} @else {
				$colors: ();
				$stops: to-ease($gradient-colors, nth($args, length($args)));
				@each $stop in $stops {
					$colors: append($colors, to-string($stop, ' '));
				}
				@return linear-gradient($gradient-direction, to-string($colors, ','));
			}
		} @else {
			@if length($gradient-colors) > 2 {
				@return linear-gradient(to-string($gradient-colors, ','));
			} @else {
				@return linear-gradient(to-ease($gradient-colors));
			}
		}
	}
}
